# BIG STRUCTURES: PROGRAMS,ROUTINES,MODULES /////////////////////////////////////////
snippet program
	!##################################################
	! PROGRAM: ${1:!name}
	!> @brief
	!! ${2:! Just brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!##################################################
	program $1
	! Initial declarations
	${4:! use some modules?}
	implicit none
	! Variables
	${5:! variables}
	end program $1
snippet module
	!#########################################################
	! MODULE: ${1:!type a name}
	!> @brief
	!! ${2:brief explanation}
	!##########################################################
	module $1
	! Initial declarations
	${3:!use other modules?}
	implicit none
	${4:! variables and types, body}
	contains
	${5:! contains, body}
	end module $1
snippet subroutine
	!###########################################################
	!# SUBROUTINE: ${1:name}
	!###########################################################
	!> @brief
	!! ${2:brief description}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0 
	!-----------------------------------------------------------
	subroutine $1(${4:arguments})
		! Initial declarations
		${5:use_modules?}
		implicit none
		! I/O variables
		${6:io_vars}
		! Local variables
		${7:local_vars}
		! Run section
		${8:body}
		return
	end subroutine $1
snippet boolfunc
	!###########################################################
	!# FUNCTION: ${1:! type a name}
	!###########################################################
	!> @brief
	!! ${2:! type brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!-----------------------------------------------------------
	function $1(${4:arguments}) result(funcOut)
		! Initial declarations
		${5:! use_modules?}
		implicit none
		! I/O variables
		${6: !io_vars}
		logical:: funcOut
		! Local variables
		${7:! local_vars}
		! Run section
		${8: !body}
		return
	end function $1
snippet realfunc
	!###########################################################
	!# FUNCTION: ${1:! type a name}
	!###########################################################
	!> @brief
	!! ${2:! type brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!-----------------------------------------------------------
	function $1(${4:arguments}) result(funcOut)
		! Initial declarations
		${5:! use_modules?}
		implicit none
		! I/O variables
		${6: !io_vars}
		real(kind=8):: funcOut
		! Local variables
		${7:! local_vars}
		! Run section
		${8: !body}
		return
	end function $1
snippet intfunc
	!###########################################################
	!# FUNCTION: ${1:! type a name}
	!###########################################################
	!> @brief
	!! ${2:! type brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!-----------------------------------------------------------
	function $1(${4:arguments}) result(funcOut)
		! Initial declarations
		${5:! use_modules?}
		implicit none
		! I/O variables
		${6: !io_vars}
		integer(kind=4):: funcOut
		! Local variables
		${7:! local_vars}
		! Run section
		${8: !body}
		return
	end function $1
snippet charfunc
	!###########################################################
	!# FUNCTION: ${1:! type a name}
	!###########################################################
	!> @brief
	!! ${2:! type brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!-----------------------------------------------------------
	function $1(${4:arguments}) result(funcOut)
		! Initial declarations
		${5:! use_modules?}
		implicit none
		! I/O variables
		${6: !io_vars}
		character:: funcOut
		! Local variables
		${7:! local_vars}
		! Run section
		${8: !body}
		return
	end function $1

# CONTROL INSTRUCTIONS //////////////////////////////////////////////////////////////
snippet if
	if (${1:!condition}) then
		${2:! body}
	endif
snippet do
	do ${1:i} = ${2:1}, ${3:N}
		${4:! loop body}
	enddo
snippet dowhile
	do while (${1:!condition})
		${2:! loop body}
	enddo
snippet switch
	select case(${1:! variable name})
	case(${2:some condition})
			${3:! body}
	case default
			${4:! do nothing}
	end select
snippet boolswitch
	select case(${1:! variable name})
	case(.true.)
			${2:! body}
	case(.false.)
			${3:! do nothing}
	end select

# VARIABLE TYPES ////////////////////////////////////////////////////////////////////

# basic
snippet real
	real(kind=${1:8}):: ${2:name}
snippet int
	integer(kind=${1:4}):: ${2:name}
snippet bool
	logical:: ${1:name}
snippet char
	character:: ${1:name}
snippet string
	character(len=${1:*}):: ${2:name}
snippet class
	class(${1:class type}):: ${2:name}

# parameters
snippet parareal
	real(kind=${1:8}),parameter:: ${2:name}=${3:value}
snippet paraint
	integer(kind=${1:4}),parameter:: ${2:name}=${3:value}
snippet parabool
	logical,parameter:: ${1:name}=${2:value}
snippet parachar
	character,parameter:: ${1:name}=${2:value}
snippet parastring
	character(len=${1:*}),parameter:: ${2:name}=${3:value}

# intent in
snippet inreal
	real(kind=${1:8}),intent(in):: ${2:name}
snippet inint
	integer(kind=${1:4}),intent(in):: ${2:name}
snippet inbool
	logical,intent(in):: ${1:name}
snippet inchar
	character,intent(in):: ${1:name}
snippet instring
	character(len=${1:*}),intent(in):: ${2:name}
snippet inclass
	class(${1:class type}),intent(in):: ${2:name}

# intent out
snippet outreal
	real(kind=${1:8}),intent(out):: ${2:name}
snippet outint
	integer(kind=${1:4}),intent(out):: ${2:name}
snippet outbool
	logical,intent(out):: ${1:name}
snippet outchar
	character,intent(out):: ${1:name}
snippet outstring
	character(len=${1:*}),intent(out):: ${2:name}
snippet outclass
	class(${1:class type}),intent(out):: ${2:name}

# intent inout
snippet inoutreal
	real(kind=${1:8}),intent(inout):: ${2:name}
snippet inoutint
	integer(kind=${1:4}),intent(inout):: ${2:name}
snippet inoutbool
	logical,intent(inout):: ${1:name}
snippet inoutchar
	character,intent(inout):: ${1:name}
snippet inoutstring
	character(len=${1:*}),intent(inout):: ${2:name}
snippet inoutclass
	class(${1:class type}),intent(inout):: ${2:name}

# generics
snippet newtype
	!/////////////////////////////////////////////////////////////////
	! TYPE: ${1:! type a name}
	!> @brief
	!! ${2:! type brief explanation}
	!
	!> @author A.S. Muzas
	!> @date ${3:! type a date}
	!> @version 1.0
	!----------------------------------------------------------------
	type:: $1
		${4:! some atributes}
	contains
		${5:! some type-bound procedures}
	end type $1
snippet type
	tupe(${1:type}):: ${2:name}
snippet array
	${1:type}, dimension(${2}):: ${3:name}

# I/O CONTROL ///////////////////////////////////////////////////////////////////////
snippet open
	open (unit=${1:10},file=${2:filename},status="${3:status}",action="${4:action}")${5}
snippet close
	close(${1:10})${2}
snippet read
	read(${1:*},${2:*}) ${3}
snippet debug
	#ifdef DEBUG
		${1:body}
	#endif
snippet write
	write(${1:*},${2:*}) ${3}
snippet print
	write(${1:*},${2:*}) '${3}'

# SOME KEYWORDS ############################################################
snippet true
	.true.
snippet false
	.false.
snippet not
	.not.
snippet allocate
	allocate(${1:name}(${2:number}))$3
snippet deallocate
	deallocate(${1:name}(${2:number}))$3
